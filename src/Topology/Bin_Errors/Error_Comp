
--ERROR 20_07 

lemma continuous_par [topological_space ℝ ] (a b : I01) {Hab : a.val < b.val } : continuous ( @par a b Hab ) := 
begin 
unfold par,
    let f1 : (S a.val b.val )→ S 0 (b.val-a.val)  := λ (x : S a.val b.val), ⟨ x.val - a.val , begin sorry end  ⟩ , 
    
    
    
    let f2 : S 0 (b.val-a.val) → I01 := λ (x: S 0 (b.val-a.val) ) , ⟨ x.val / (b.val - a.val) , begin sorry end  ⟩ , 

    have H1 : continuous f1, 
        --have H1U: uniform_continuous (λ ) real.uniform_continuous_add --real.comm_ring 
        sorry,
    have H2 : continuous f2, 
    sorry, 
    sorry, 
end 

-- definition of f1 
/- f1 : Π (a_1 : ↥(S (a.val) (b.val))), ↥(S 0 (b.val - a_1.val)) :=
  λ (x : ↥(S (a.val) (b.val))), ⟨x.val - a.val, _⟩ -/

-- error message at H1 
/- 
type mismatch at application
  continuous f1
term
  f1
has type
  Π (a_1 : ↥(S (a.val) (b.val))), ↥(S 0 (b.val - a_1.val)) : Type
but is expected to have type
  ?m_1 → ?m_2 : Type (max ? ?)
 -/ 


definition S (a b : ℝ ) : set ℝ := {x : ℝ | a ≤ x ∧ x ≤ b} 

 -- Should use I01 as set ℝ - but this results in code not finishing compiling (or S _ _ : set I01 - but that would need changing most of following code)
def Hunion : (S 0 (1/2:ℝ) ∪ S (1/2:ℝ) 1 ) = I01 := sorry 

/- type mismatch at application
  S 0 (1 / 2) ∪ S (1 / 2) 1 = I01
term
  I01
has type
  Type : Type 1
but is expected to have type
  set ℝ : Type -/
