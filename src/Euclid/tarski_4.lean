import Euclid.tarski_3
open classical set
namespace Euclidean_plane
variables {point : Type} [Euclidean_plane point]

local attribute [instance] prop_decidable

-- Planes and Half-planes

def Bl (a : point) (A : set point) (b : point) : Prop := line A ∧ a ∉ A ∧ b ∉ A ∧ ∃ t, t ∈ A ∧ B a t b

theorem nine2 {a b : point} {A : set point} : Bl a A b → a ≠ b :=
begin
intros h h1,
subst h1,
unfold Bl at h,
apply h.2.1,
cases h.2.2.2 with x hx,
suffices : a = x,
  rw this,
  exact hx.1,
exact bet_same a x hx.2
end

theorem Bl.symm {a b : point} {A : set point} : Bl a A b → Bl b A a :=
begin
unfold Bl,
intro h,
split,
  exact h.1,
split,
  exact h.2.2.1,
split,
  exact h.2.1,
cases h.2.2.2 with t ht,
constructor,
split,
  exact ht.1,
exact ht.2.symm
end

lemma nine3 {a c m r : point} {A : set point} : Bl a A c → m ∈ A → M a m c → r ∈ A → 
∀ b, sided r a b → Bl b A c :=
begin
unfold Bl,
intros h h1 h2 h3 b hb,
cases hb.2.2,
  let h4 := (seven15 m).1 h_1,
  let h5 := (seven6 h2).symm,
  rw h5 at h4,
  let h6 := seven5 m b,
  cases pasch b (S m r) (S m b) m c h6.1 h4 with t ht,
  split,
    exact h.1,
  split,
    intro h_2,
    apply h.2.1,
    exact six27 h.1 h3 h_2 h_1,
  split,
    exact h.2.2.1,
  existsi t,
  split,
    let h_2 := seven24 h.1 h1 h3,
    exact six27 h.1 h1 h_2 ht.1,
  exact ht.2.symm,
cases pasch r c a b m h_1 h2.1.symm with t ht,
split,
  exact h.1,
split,
  intro h_2,
  apply h.2.1,
  let h_3 := six18 h.1 hb.2.1.symm h3 h_2,
  rw h_3,
  left,
  exact h_1,
split,
  exact h.2.2.1,
existsi t,
split,
  exact six27 h.1 h1 h3 ht.2,
exact ht.1
end

lemma nine4a {a c m r s t : point} {A : set point} (h : a ≠ r) (h1 : c ≠ s) (h3 : r ∈ A) (h4 : A ⊥ l a r) 
(h5 : s ∈ A) (h6 : A ⊥ l c s) (h2 : Bl a A c) (ht : t ∈ A ∧ B a t c) (h_1 : ¬r = s) (h_2 : distle s c r a) : 
M r m s → ∀ u, (sided r u a ↔ sided s (S m u) c) :=
begin
unfold Bl at h2,
let g1 := ne.symm h_1,
let g2 := six18 h2.1 g1 h5 h3,
have g3 : (l s r) ⊥ (l c s),
  rwa g2 at h6,
have g4 : (l s r) ⊥ (l a r),
  rwa g2 at h4,
have g5 : col s r t,
  rw g2 at ht,
  exact ht.1,
cases h_2 with b gb,
cases eight24 g1 h1.symm h.symm g3.symm g4.symm g5 ht.2.symm gb.1 gb.2 with m' hm,
intro h_2,
have h_3 : m' = m,
  exact unique_of_exists_unique (eight22 r s) hm.1.symm h_2,
subst m',
intro u,
have h_3 : sided r a b,
    split,
      exact h,
    split,
      intro h_4,
      subst b,
      apply h1.symm,
      exact id_eqd s c r gb.2,
    right,
    exact gb.1,
split,
  intro h_4,
  let h_5 := sided.trans h_4 h_3,
  split,
    intro h_6,
    let h_7 := seven5 m u,
    rw h_6 at h_7,
    apply h_4.1,
    exact unique_of_exists_unique (seven4 m s) h_7.symm hm.1,
  split,
    exact h1,
  let h_6 := seven6 h_2,
  rw h_6,
  let h_7 := seven6 hm.2.symm,
  rw h_7,
  cases h_5.2.2,
    left,
    exact (seven15 m).1 h_8,
  right,
  exact (seven15 m).1 h_8,
intro h_4,
suffices : sided r u b,
  exact sided.trans this h_3.symm,
let h_5 := seven6 h_2,
let h_6 := seven6 hm.2.symm,
rw [h_5, h_6] at h_4,
split,
  intro h_7,
  subst u,
  apply h_4.1,
  refl,
split,
  exact h_3.2.1,
cases h_4.2.2,
  left,
  exact (seven15 m).2 h_7,
right,
exact (seven15 m).2 h_7
end

lemma nine4b {a c r s t : point} {A : set point} (h : a ≠ r) (h1 : c ≠ s) (h3 : r ∈ A) (h4 : A ⊥ l a r) 
(h5 : s ∈ A) (h6 : A ⊥ l c s) (h2 : Bl a A c) (ht : t ∈ A ∧ B a t c) (h_1 : ¬r = s) (h_2 : distle s c r a) : 
∀ u v, sided r u a → sided s v c → Bl u A v :=
begin
let g1 := ne.symm h_1,
let g2 := six18 h2.1 g1 h5 h3,
have g3 : (l s r) ⊥ (l c s),
  rwa g2 at h6,
have g4 : (l s r) ⊥ (l a r),
  rwa g2 at h4,
have g5 : col s r t,
  rw g2 at ht,
  exact ht.1,
cases h_2 with b gb,
cases eight24 g1 h1.symm h.symm g3.symm g4.symm g5 ht.2.symm gb.1 gb.2 with m hm,
let h7 := nine4a h h1 h3 h4 h5 h6 h2 ht h_1 ⟨b, gb⟩ hm.1.symm,
unfold Bl at h2,
intros u v hu hv,
let h8 := (h7 u).1 hu,
let h9 := sided.trans h8 hv.symm,
have h10 : u ∉ A,
  intro h_2,
  let h_3 := six18 h2.1 hu.1 h_2 h3,
  apply h2.2.1,
  rw h_3,
  cases hu.2.2,
    right, right,
    exact h_4.symm,
  right, left,
  exact h_4,
have h11 : m ∈ A,
  rw g2,
  right, left,
  exact hm.1.1.symm,
have h12 : Bl (S m u) A u,
  unfold Bl,
  split,
    exact h2.1,
  split,
    intro h_2,
    apply h10,
    rw (seven7 m u).symm,
    exact seven24 h2.1 h11 h_2,
  split,
    exact h10,
  existsi m,
  split,
    exact h11,
  exact (seven5 m u).1.symm,
apply Bl.symm,
exact nine3 h12 h11 (seven5 m u).symm h5 v h9
end


theorem nine4 {a c m r s : point} {A : set point} : a ≠ r → c ≠ s → Bl a A c → r ∈ A → perp A (l a r) → s ∈ A → perp A (l c s) → 
(M r m s → ∀ u, (sided r u a ↔ sided s (S m u) c)) ∧ ∀ u v, sided r u a → sided s v c → Bl u A v :=
begin
intros h h1 h2 h3 h4 h5 h6,
cases h2.2.2.2 with t ht,
cases em (r = s),
  have h_2 : xperp r (l a r) A,
    apply eight14b.2,
    split,
      exact h4.symm,
    split,
      exact six14 h,
    split,
      exact h2.1,
    split,
      exact eight14a h4.symm,
    split,
      exact (six17 h).2.1,
    exact h3,
  have h_3 : xperp s (l c s) A,
    apply eight14b.2,
    split,
      exact h6.symm,
    split,
      exact six14 h1,
    split,
      exact h2.1,
    split,
      exact eight14a h6.symm,
    split,
      exact (six17 h1).2.1,
    exact h5,
  let h_4 := h_2.2.2.2.2 a t (six17 h).1 ht.1,
  let h_5 := h_3.2.2.2.2 c t (six17 h1).1 ht.1,
  rw h_1 at *,
  let h_6 := eight6 h_4 h_5 ht.2,
  rw h_6 at *,
  split,
    intros h5 u,
    have h_7 : m = t,
      exact (bet_same t m h5.1).symm,
    rw h_7,
    let h6 := seven5 t u,
    apply iff.intro,
      intro hu,
      unfold sided,
      split,
        intro h_9,
        apply hu.1,
        exact seven9 (eq.trans h_9 (seven11 t).symm),
      split,
        exact h1,
      cases hu.2.2,
        have h7 : B u t c,
          exact three6a h_8.symm ht.2,
        exact five2 hu.1 h6.1 h7,
      have h7 : B u t c,
        exact three7a h_8.symm ht.2 h,
      exact five2 hu.1 h6.1 h7,
    intro hu,
    unfold sided,
    split,
      intro h_8,
      apply hu.1,
      simp [h_8],
    split,
      exact h,
    cases hu.2.2,
      have h7 : B (S t u) t a,
        exact three6a h_8.symm ht.2.symm,
      exact five2 hu.1 h6.1.symm h7,
    have h7 : B (S t u) t a,
      exact three7a h_8.symm ht.2.symm h1,
    exact five2 hu.1 h6.1.symm h7,
  intros u v hu hv,
  unfold Bl,
  split,
    exact h2.1,
  split,
    intro h_6,
    let h_7 := six18 h2.1 hu.1 h_6 ht.1,
    rw h_7 at h2,
    exact h2.2.1 (six4.1 hu).1,
  split,
    intro h_6,
    let h_7 := six18 h2.1 hv.1 h_6 ht.1,
    rw h_7 at h2,
    exact h2.2.2.1 (six4.1 hv).1,
  existsi t,
  split,
    exact ht.1,
  exact six8 hu hv ht.2,
cases five10 s c r a,
  split,
    apply nine4a;
    assumption,
  apply nine4b;
  assumption,
let g2 := six18 h2.1 h_1 h3 h5,
have g3 : (l r s) ⊥ (l c s),
  rwa g2 at h6,
have g4 : (l r s) ⊥ (l a r),
  rwa g2 at h4,
have g5 : col r s t,
  rw g2 at ht,
  exact ht.1,
cases h_2 with b gb,
cases eight24 h_1 h.symm h1.symm g4.symm g3.symm g5 ht.2 gb.1 gb.2 with m' hm,
let h7 := nine4a h1 h h5 h6 h3 h4 h2.symm ⟨ht.1, ht.2.symm⟩ (ne.symm h_1) ⟨b, gb⟩ hm.1.symm,
split,
  intro h_2,
  have h_3 : m' = m,
    exact unique_of_exists_unique (eight22 r s) hm.1 h_2,
    subst m',
  intro u,
  suffices : sided r (S m (S m u)) a ↔ sided s (S m u) c,
    simp at this,
    exact this,
  exact (h7 (S m u)).symm,
intros u v hu hv,
apply Bl.symm,
apply nine4b h1 h h5 h6 h3 h4 h2.symm ⟨ht.1, ht.2.symm⟩ (ne.symm h_1) ⟨b, gb⟩ v u hv hu
end

theorem nine5 {a b c r : point} {A : set point} : Bl a A c → r ∈ A → sided r a b → Bl b A c :=
begin
intros h h1 h2,
have h3 : b ∉ A,
  intro h_1,
  let h_2 := six18 h.1 h2.2.1.symm h1 h_1,
  apply h.2.1,
  rw h_2,
  exact (four11 (six4.1 h2).1).2.2.1,
cases eight17 h.1 h.2.1 with x hx,
cases eight17 h.1 h3 with y hy,
cases eight17 h.1 h.2.2.1 with z hz,
cases eight22 x z with m hm,
let h4 := six27 h.1 hx.1.1 hz.1.1 hm.1.1,
have h5 : a ≠ x,
  intro h_1,
  apply h.2.1,
  rw h_1,
  exact hx.1.1,
have h6 : b ≠ y,
  intro h_1,
  apply h3,
  rw h_1,
  exact hy.1.1,
have h7 : c ≠ z,
  intro h_1,
  apply h.2.2.1,
  rw h_1,
  exact hz.1.1,
let h8 := nine4 h5 h7 h hx.1.1 hx.1.2 hz.1.1 hz.1.2,
let h9 := (h8.1 hm.1 a).1 (six5 h5),
let h10 := h8.2 a (S m a) (six5 h5) h9,
let h11 := nine3 h10 h4 (seven5 m a) h1 b h2,
have h12 : (S m a) ≠ z,
  intro h_1,
  apply h5,
  apply unique_of_exists_unique (seven8 m z) h_1,
  exact (seven6 hm.1).symm,
have h13 : l c z = l (S m a) z,
  apply six18 (six14 h7),
      exact h12,
    exact (four11 (six4.1 h9).1).2.2.2.2,
  exact (six17 h7).2.1,
let h14 := hz.1,
rw h13 at h14,
let h15 := (nine4 h6 h12 h11 hy.1.1 hy.1.2 h14.1 h14.2).2 b c (six5 h6) h9.symm,
exact h15,
exact a
end

theorem nine6 {a b c p q : point} : B a c p → B b q c → ∃ x, B a x b ∧ B p q x :=
begin
intros h h1,
cases em (col p q c),
  cases em (B p q c),
    let h_3 := three6b h_2 h.symm,
    constructor,
    split,
      exact three3 a b,
    exact h_3,
  have h_3 : sided q p c,
    exact six4.2 ⟨h_1, h_2⟩,
  constructor,
  split,
    exact three1 a b,
  exact (six6 h1 h_3.symm).symm,
have h2 : l p q ≠ l c q,
  intro h_2,
  apply h_1,
  let h_3 := (six17 (six26 h_1).2.1.symm).1,
  rwa ←h_2 at h_3,
cases em (b ∈ l p q),
  suffices : b = q,
    constructor,
    split,
      exact three1 a b,
    rw this,
    exact three1 p q,
  by_contradiction h_3,
  apply h_1,
  suffices : c ∈ l p q,
    exact this,
  suffices : l p q = l b q,
    rw this,
    left,
    exact h1,
  exact six18 (six14 (six26 h_1).1) h_3 h_2 (six17 (six26 h_1).1).2.1,
have h3 : Bl c (l p q) b,
  split,
    exact six14 (six26 h_1).1,
  split,
    exact h_1,
  split,
    exact h_2,
  constructor,
  split,
    exact (six17 (six26 h_1).1).2.1,
  exact h1.symm,
have h4 : sided p c a,
  split,
    exact (six26 h_1).2.2.symm,
  split,
    intro h_1,
    subst h_1,
    apply (six26 h_1).2.2,
    exact bet_same a c h,
  left,
  exact h.symm,
let h5 := nine5 h3 (six17 (six26 h_1).1).1 h4,
cases h5.2.2.2 with x hx,
constructor,
split,
  exact hx.2,
cases pasch p b a c x h.symm hx.2.symm with t ht,
suffices : t = q,
  subst this,
  exact ht.2.symm,
by_contradiction h_4,
apply h2,
apply six21 h_4 (six14 (six26 h_1).1) (six14 (six26 h_1).2.1.symm),
      exact six27 (six14 (six26 h_1).1) (six17 (six26 h_1).1).1 hx.1 ht.2.symm,
    suffices : l c q = l c b,
      rw this,
      right, left,
      exact ht.1.symm,
    apply six18 (six14 (six26 h_1).2.1.symm),
        intro h_5,
        subst h_5,
        suffices : c ≠ c,
          contradiction,
        exact nine2 h3,
      exact (six17 (six26 h_1).2.1.symm).1,
    left,
    exact h1.symm,
  exact (six17 (six26 h_1).1).2.1,
exact (six17 (six26 h_1).2.1.symm).2.1
end

def side (A : set point) (a b : point) : Prop := ∃ c, Bl a A c ∧ Bl b A c

theorem nine8 {a b c : point} {A : set point} : Bl a A c → (Bl b A c ↔ side A a b) :=
begin
intro h,
split,
  intro h1,
  constructor,
  exact ⟨h, h1⟩,
intro h1,
cases h1 with d hd,
cases hd.1.2.2.2 with x hx,
cases hd.2.2.2.2 with y hy,
cases pasch a b d x y hx.2 hy.2 with z hz,
cases em (x = y),
  subst y,
  suffices : sided x a b,
    exact nine5 h hx.1 this,
  split,
    intro h_1,
    subst x,
    apply hd.1.2.1,
    exact hx.1,
  split,
    intro h_1,
    subst x,
    apply hd.2.2.1,
    exact hx.1,
  suffices : d ≠ x,
    exact five2 this hx.2.symm hy.2.symm,
  intro h_1,
  subst d,
  apply hd.1.2.2.1,
  exact hx.1,
have h1 : A = l x y,
  exact six18 h.1 h_1 hx.1 hy.1,
have h2 : z ≠ x,
  intro h_1,
  subst h1,
  subst h_1,
  apply hd.1.2.1,
  right, right,
  exact hz.2.symm,
have h3 : z ≠ y,
  intro h_1,
  subst h1,
  subst h_1,
  apply hd.2.2.1,
  left,
  exact hz.1,
let h4 := nine5 h hy.1 (six7 hz.2 h3).symm,
exact nine5 h4 hx.1 (six7 hz.1 h2)
end



end Euclidean_plane